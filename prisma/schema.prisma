generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Role {
  REPORTER
  ADMIN
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  role            Role            @default(REPORTER)

  accounts        Account[]
  sessions        Session[]
  vulnerabilities Vulnerability[]
  comments        Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vulnerability {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  severity    Severity
  status      Status    @default(OPEN)
  tags        Tag[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  comments    Comment[]
}

model Tag {
  id              Int           @id @default(autoincrement())
  name            String
  vulnerabilityId Int
  vulnerability   Vulnerability @relation(fields: [vulnerabilityId], references: [id])
}

model Comment {
  id              Int           @id @default(autoincrement())
  content         String
  createdAt       DateTime      @default(now())
  vulnerabilityId Int
  userId          String
  vulnerability   Vulnerability @relation(fields: [vulnerabilityId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}
